{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/Form.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","textAlign","margin","color","TodoItem","props","className","completed","title","type","checked","onChange","taskStatus","id","onClick","deleteTask","Form","addTask","event","setState","target","value","submitTask","preventDefault","state","length","addTaskItem","correctLength","action","htmlFor","this","React","Component","TodoContainer","updatedTodosArr","todos","map","todo","currentTask","uuidv4","todosState","push","updatedTodosArray","filter","item","console","log","axios","get","params","_limit","then","response","data","key","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.95079836.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n\tconst h1Style = {\n\t\ttextAlign: \"center\",\n\t\tmargin: \"30px\",\n\t\tcolor: \"green\",\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<h1 style={h1Style}>todo</h1>\n\t\t\t<h2\n\t\t\t\tstyle={{\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\tmargin: \"22px\",\n\t\t\t\t\tcolor: \"green\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tReact Learning to do's\n\t\t\t</h2>\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../css/todoItem.scss\";\n\n// FUNCTIONAL COMPONENT\nconst TodoItem = (props) => {\n\t// PROPS WRITING ALTERNATIVE\n\t// const { completed, handleChange, deleteTodoHandler, title, id } = props;\n\treturn (\n\t\t<li className=\"li-task\">\n\t\t\t{/* ALTERNATIVE TO IN-LINE STYLE */}\n\t\t\t<span className={props.completed ? \"completed-item\" : null}>\n\t\t\t\t{props.title}\n\t\t\t</span>\n\n\t\t\t<input\n\t\t\t\tclassName=\"check-box\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tchecked={props.completed}\n\t\t\t\tonChange={() => {\n\t\t\t\t\tprops.taskStatus(props.id);\n\t\t\t\t}}\n\t\t\t></input>\n\n\t\t\t<button\n\t\t\t\t// onClick={props.deleteTask}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tprops.deleteTask(props.id);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tx\n\t\t\t</button>\n\t\t</li>\n\t);\n};\n\nexport default TodoItem;\n","import React from \"react\";\n\nclass Form extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttitle: \"\",\n\t\t\tcorrectLength: true,\n\t\t};\n\t}\n\n\t// ADD TASK\n\taddTask = (event) => {\n\t\tthis.setState({ title: event.target.value });\n\t};\n\n\t// SUBMIT TASK\n\tsubmitTask = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// LENGTH CHECK\n\t\tif (this.state.title.length > 3 && this.state.title.length < 25) {\n\t\t\t// SET STATE\n\t\t\tthis.props.addTaskItem(this.state.title);\n\n\t\t\t// RESET INPUT\n\t\t\tthis.setState({\n\t\t\t\ttitle: \"\",\n\t\t\t\tcorrectLength: true,\n\t\t\t});\n\t\t} else {\n\t\t\t// RESET INPUT\n\t\t\tthis.setState({\n\t\t\t\tcorrectLength: false,\n\t\t\t});\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"task-form\" action=\"#\">\n\t\t\t\t<label htmlFor=\"#\">Add a task:</label>\n\t\t\t\t<input type=\"text\" value={this.state.title} onChange={this.addTask} />\n\t\t\t\t{this.state.correctLength ? null : (\n\t\t\t\t\t<p>Task musst be between 3 and 25 length</p>\n\t\t\t\t)}\n\t\t\t\t<button onClick={this.submitTask}>Submit</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default Form;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport Form from \"./Form\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nclass TodoContainer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"Component did mount\");\n\t\taxios\n\t\t\t.get(\"https://jsonplaceholder.typicode.com/todos\", {\n\t\t\t\tparams: { _limit: 10 },\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response.data);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttodos: response.data,\n\t\t\t\t});\n\t\t\t});\n\t\t// ADD JSON TODO\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconsole.log(\"Component did update\");\n\t}\n\n\t// TASK CHECKBOX\n\ttaskStatus = (id) => {\n\t\tconst updatedTodosArr = this.state.todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\n\t\tthis.setState({\n\t\t\ttodos: updatedTodosArr,\n\t\t});\n\t};\n\n\t// ADD TASK\n\taddTaskItem = (title) => {\n\t\t// CURRENT TASK AND STATE TODOS\n\t\tconst currentTask = {\n\t\t\tid: uuidv4(),\n\t\t\ttitle: title,\n\t\t\tcompleted: false,\n\t\t};\n\t\tconst todosState = [...this.state.todos];\n\n\t\t// PUSH INTO LIST\n\t\ttodosState.push(currentTask);\n\n\t\t// RESET COMMENT AND NAME IN STATE\n\t\tthis.setState({\n\t\t\ttodos: todosState,\n\t\t});\n\t};\n\n\t// DELETE TASK\n\tdeleteTask = (id) => {\n\t\tconst updatedTodosArray = this.state.todos.filter((item) => item.id !== id);\n\n\t\tthis.setState({\n\t\t\ttodos: updatedTodosArray,\n\t\t});\n\t};\n\n\trender() {\n\t\tconsole.log(\"Component render\");\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* TASK INPUT */}\n\t\t\t\t<Form addTaskItem={this.addTaskItem} />\n\n\t\t\t\t{/* TASK OUTPUT */}\n\t\t\t\t<ul className=\"todo-list\">\n\t\t\t\t\t{this.state.todos.map((todo) => (\n\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\ttitle={todo.title}\n\t\t\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\t\t\tid={todo.id}\n\t\t\t\t\t\t\ttaskStatus={this.taskStatus}\n\t\t\t\t\t\t\tdeleteTask={this.deleteTask}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n//\nexport default TodoContainer;\n","import React from \"react\";\nimport \"./css/App.scss\";\nimport Header from \"./components/Header\";\nimport TodoContainer from \"./components/TodoContainer\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* HEADER */}\n\t\t\t<Header />\n\n\t\t\t<TodoContainer text=\"Text as props\" />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}